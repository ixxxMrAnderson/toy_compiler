/*
Test Package: Optim
Author: 18' Zonghan YANG
Time: 2021-04-01
Input:
=== input ===
5 6
1 1 4 5 1 4
1 9 1 9 8 1 0
=== end ===
Output:
=== output ===
1
10
14
51
67
63
115
57
49
33
4
0
1338
=== end ===
ExitCode: 0
RunTimeLimit: 2500000
OutputLengthLimit: 10000
CompileTimeLimit: 30
*/

// NTT, source: https://blog.csdn.net/wu_tongtong/article/details/77620709


class taskStress {
    int ret;
    taskStress() {
        int a=4,b=7,c=7,d=2,e=5,f=5,g=7,h=8,i=5,j=1,k=4,l=8,m=1,n=3,o=3,p=5,q=6,r=8,s=2,t=4,u=1,v=4,w=4,x=9,y=3,A=1,B=6,C=6,D=8,E=4,F=1,G=7,H=4,I=2,J=6,K=8,L=7,M=9,N=5,O=6,P=4,Q=4,R=9,S=1,T=2,U=4,V=2,W=6,X=9,Y=3,Z=998;
        for (a = 0; a%Z < 100; Z=Z+10) {
            a=b;b=c+6;c=d;d=e+4;e=f+9;f=g;g=h;h=i+1;i=j+4;j=k;k=l+6;l=m;m=n;n=o;o=p+6;p=q;q=r;r=s+2;s=t;t=u;u=v+1;v=w;w=x+1;x=y+4;y=A+9;A=B+8;B=C+9;C=D+8;D=E+6;E=F;F=G;G=H+6;H=I;I=J+7;J=K+5;K=L+1;L=M+7;M=N;N=O;O=P;P=Q+9;Q=R;R=S;S=T+9;T=U+9;U=V;V=W+9;W=X+2;X=Y;Y=Z/2;Z=Z^1;
        }
        ret = -1;
    }
    int main() {
        printlnInt(ret);
		return 0;
    }
};

class taskInline {
    int rng_seed;
    taskInline () {
        rng_seed = 19260817;
    }

    int unsigned_shl(int x, int k) {
        return x << k;
    }
    int unsigned_shr(int x, int k) { // k should be (0, 31)
        int INT_MIN = 1 << 31;
        if (x >= 0) return x >> k;
        else return (1 << (31 - k)) | ((x ^ INT_MIN) >> k);
    }
    int rng() {
        int rng_mask = 1073741823;
        int x = rng_seed;
        x = x ^ unsigned_shl(x, 13);
        x = x ^ unsigned_shr(x, 17);
        x = x ^ unsigned_shl(x, 5);
        rng_seed = x;
        return x & rng_mask;
    }
    int gcd(int x, int y) {
        if (y > 0) return gcd(y, x % y);
        else return x;
    }
    int main() {
        int sum = 0;
        while ((rng() & 255) != (rng() & 255)) {
            sum = sum ^ gcd(rng() + 1, rng() + 1);
        }
        return sum ^ 5647;
    }
};

int main() {
    taskStress str = new taskStress(); // hard to build IR, slow in DomTree builder
    str.main();
    return 0;
}
